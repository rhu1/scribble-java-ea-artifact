//-- rhu1/scribble-java-ea-artifact (main) Â»
// ./scribblec-ea.sh test/scrib/src/tmp/EATmp.scr Proto01 -d test/scrib/out

module tmp.EATmp;


data <scala> "String" from "" as String;
data <scala> "Int" from "" as Int;
data <scala> "Boolean" from "" as Boolean;


// TODO
// - private/protected
// - build java from commandline
// - build/run scala from commmandline
//
// - pay types -> frame size wire proto -- (de)serialization in Actor.sendMessage and handle SEND
// - immutable data objects? -- API needs to thread through
// - path dependent Done
// - handler coalescing
// - ...try "TCP-based session runtime" using EDP and coalescing (cf. Init)
//
// - DONE
// - send method @throws[IOException]
// - spaces not tabs
// - package from module
// - failure handling -- CancelledKey
// - sid of "nested" failure exception, cf. become



// !!! use ./scribblec-ea.sh for file output


//* // gen01
global protocol Proto01(role A, role B)
{
	L1(String) from A to B;
}
//*/


/* // gen02
global protocol Proto1(role A, role B)
{
	L1(String) from A to B;
	L2(String) from B to A;
}
//*/


/* // gen03
global protocol Proto1(role A, role B)
{
	L1(String) from A to B;
	choice at B {
	    L2(String) from B to A;
	} or {
	    L3(String) from B to A;
	}
}
//*/


/* // gen04
global protocol Proto1(role A, role B)
{
	L1(String) from A to B;
	choice at B {
	    L2(String) from B to A;
	    do Proto1(A, B);
	} or {
	    L3(String) from B to A;
	}
}
//*/


/* // gen05
global protocol Proto1(role A, role B, role C)
{
	L1(String) from A to B;
	choice at B {
	    L2a(String) from B to A;
	    L2c(String) from B to C;
	    do Proto1(A, B, C);
	} or {
	    L3a(String) from B to A;
	    L3c(String) from B to C;
	}
}
//*/


/* // gen06
global protocol Proto1(role A, role B) {
    L1(Int) from A to B;  // testing payload types
}
//*/


/* // gen07, gen08  // Testing multiple session (suspendbang/join/become -- weaken/affine), A1/A2 - B
global protocol Proto1(role A, role B) {
    L1(String) from A to B;
    L2(String) from B to A;
}
//*/


//*/ 09
global protocol Proto09(role A, role B)
{
	L1() from A to B;
	L2(Int, Boolean) from B to A;
}
//*/


//*/ 10
global protocol Proto10(role A, role B)
{
	L1() from A to B;
	L2() from B to A;
	do Proto10(A, B);
}
//*/


















//* // Shop -- !!! -fair
global protocol ShopProto1(role C, role S, role P)
{
    ReqItems(String) from C to S;
    Items(String) from S to C;
    do ShopProto1Aux(C, S, P);
}

aux global protocol ShopProto1Aux(role C, role S, role P)
{
    choice at C {
        GetItemInfo(String) from C to S;
        ItemInfo(String) from S to C;
        do ShopProto1Aux(C, S, P);
    } or {
        Checkout(String) from C to S;
        choice at S {
            Processing(String) from S to C;
            Buy(String) from S to P;
            choice at P {
                OK(String) from P to S;
                OKc(String) from S to C;  // delivery date
                do ShopProto1Aux(C, S, P);
            } or {
                Declined(String) from P to S;
                Declinedc(String) from S to C;  // insufficient funds
                do ShopProto1Aux(C, S, P);
            }
        } or {
            OutOfStock(String) from S to C;
            do ShopProto1Aux(C, S, P);
        }
    }
}

global protocol ShopProto2(role SS, role SF) {
    choice at SS {
        AddItem(String) from SS to SF;
        do ShopProto2(SS, SF);
    } or {
        RemoveItem(String) from SS to SF;
        do ShopProto2(SS, SF);
    }
}
//*/


//* // robot
global protocol RobotProto(role R, role D, role W) {
    WantD(String) from R to D;
    WantW(String) from R to W;  // !!!  // XXX
    choice at D {
        Busy(String) from D to R;
        Cancel(String) from D to W;  // !!!
    } or {
        // fork
        // [D] Open door
        GoIn(String) from D to R;
        Prepare(String) from D to W;

        // join -- !!! testing async message arrival handler installed
        // [R] Drive in
        Inside(String) from R to D;
        // [D] Close door
        Prepared(String) from W to D;

        Deliver(String) from D to W;
        // [W] Lock table
        Delivered(String) from W to R;
        // [R] Take part

        // fork
        PartTaken(String) from R to W;
        WantLeave(String) from R to D;

        // join
        // [D] Open door
        GoOut(String) from D to R;
        // [R] Drive out
        Outside(String) from R to D;
        // [D] Close door
        TableIdle(String) from W to D;
    }
}
//*/


//* // chat
global protocol ChatProto1(role C, role S) {  // ChatServer(ClientThread, RoomRegistry)
    choice at C {
        LookupRoom(String) from C to S;  // RoomName
        choice at S {
            RoomPID(String) from S to C;  // RoomName, PID => AP port
            //C initiates ChatSession(C, new ChatRoom);  // !!!
        } or {
            RoomNotFound(String) from S to C;  // RoomName
        }
        do ChatProto1(C, S);
    } or {
        CreateRoom(String) from C to S;  // RoomName
        choice at S {
            CreateRoomSuccess(String) from S to C;  // RoomName
        } or {
            RoomExists(String) from S to C;  // RoomName
        }
        do ChatProto1(C, S);
    } or {
        ListRooms(String) from C to S;
        RoomList(String) from S to C;  // List<RoomName>
        do ChatProto1(C, S);
    } or {
        Bye(String) from C to S;  // !!!
    }
}

global protocol ChatProto2(role C2, role R2) {  // C, R
    choice at C2 {
        OutgoingChatMessage(String) from C2 to R2;
        do ChatProto2(C2, R2);
    } or {
        LeaveRoom(String) from C2 to R2;
    }
}

global protocol ChatProto3(role R3, role C3){
    choice at R3 {
        IncomingChatMessage(String) from R3 to C3;
        do ChatProto3(R3, C3);
    } or {
        Bye(String) from R3 to C3;
    }
}
//*/










// become not needed
global protocol PingPong1(role C, role Pinger, role Ponger, role PongReceiver) {
    Start() from C to Pinger;
    do PingPong1Aux(C, Pinger, Ponger, PongReceiver);
}

/*// FIXME PingPinger message case class name clash for Ponger1/3 within PingPong1_Ponger file
aux global protocol PingPong1Aux(role C, role Pinger, role Ponger, role PongReceiver) {
    Ping() from Pinger to Ponger;
    Pong() from Ponger to PongReceiver;
    choice at PongReceiver {
         PingC() from PongReceiver to Pinger;
         do PingPong1Aux(C, Pinger, Ponger, PongReceiver);  // !!! extended scrib  // cf. C choice flattened to only Stop
    } or {
         Stop() from PongReceiver to Ponger;  // XXX sender conflict (inconsistent external choice subjects)
         Stop() from PongReceiver to Pinger;  // !!! cf. exit() implicit messages  // cf. explicit connections
         Stop() from PongReceiver to C;
    }
}*/

// FIXME PingPinger message case class name clash for Ponger1/3 within PingPong1_Ponger file
aux global protocol PingPong1Aux(role C, role Pinger, role Ponger, role PongReceiver) {
    Ping() from Pinger to Ponger;
    Pong() from Ponger to PongReceiver;
    choice at PongReceiver {
         PingC() from PongReceiver to Pinger;
         // FIXME unfold Ping/Pong (copy to PingPong1 and here)
         do PingPong1Aux(C, Pinger, Ponger, PongReceiver);  // !!! extended scrib  // cf. C choice flattened to only Stop
    } or {
         Stop() from PongReceiver to Pinger;  // !!! cf. exit() implicit messages  // cf. explicit connections
         Stop() from Pinger to Ponger;
         Stop() from Pinger to C;
    }
}


global protocol PingPong2(role Pinger, role Ponger) {
    Ping0() from Pinger to Ponger;
    Pong0() from Ponger to Pinger;
    do PingPong2aux(Pinger, Ponger);
}

aux global protocol PingPong2aux(role Pinger, role Ponger) {
    choice at Pinger {  // become Pinger from PingDecisionReceiver and choose according case
        Ping() from Pinger to Ponger;
        Pong() from Ponger to Pinger;
        // Pinger become PingDecisionMaker
        do PingPong2aux(Pinger, Ponger);
    } or {
        Stop() from Pinger to Ponger;
    }
}

global protocol PingPong2C(role C, role PingDecisionMaker, role PingDecisionReceiver) {
    Start() from C to PingDecisionReceiver;
    do PingPong2Caux(C, PingDecisionMaker, PingDecisionReceiver);
}

aux global protocol PingPong2Caux(role C, role PingDecisionMaker, role PingDecisionReceiver) {
    // become PingDecisionMaker from Pinger and make decision
    choice at PingDecisionMaker {
        Ping() from PingDecisionMaker to PingDecisionReceiver;
        // PingDecisionReceiver become Pinger and choose this case
        do PingPong2Caux(C, PingDecisionMaker, PingDecisionReceiver);
    } or {
        StopC() from PingDecisionMaker to PingDecisionReceiver;
        // PingDecisionReceiver become Pinger and choose this case
        StopC() from PingDecisionMaker to C;
    }
}






global protocol Fib1(role P, role C) {
    Request(Int) from P to C;
    Response(Int) from C to P;
}

global protocol Fib2(role P, role C1, role C2) {
    Request1(Int) from P to C1;
    Request2(Int) from P to C2;
    Response1(Int) from C1 to P;
    Response2(Int) from C2 to P;
}






